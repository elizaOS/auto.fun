name: Deploy to Cloudflare Workers

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Generate Drizzle migrations
        run: bun run generate

      - name: Run worker tests
        run: bun run test:worker
        
  deploy:
    runs-on: ubuntu-latest
    name: Deploy Worker
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Generate Drizzle migrations
        run: bun run generate
      
      - name: Set environment variables
        id: set-env
        run: |
          if [[ $GITHUB_REF == *"main"* ]]; then
            echo "WORKER_NAME=autofun-api" >> $GITHUB_ENV
            echo "WORKER_ENV=production" >> $GITHUB_ENV
            echo "DB_SUFFIX=" >> $GITHUB_ENV
          else
            echo "WORKER_NAME=autofun-api-dev" >> $GITHUB_ENV
            echo "WORKER_ENV=development" >> $GITHUB_ENV
            echo "DB_SUFFIX=-dev" >> $GITHUB_ENV
          fi

      # Apply migrations to D1 database before deploying
      - name: Apply D1 migrations
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          command: d1 execute AUTO_DB${{ env.DB_SUFFIX }} --file=./drizzle/migrations.sql
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}

      # Publish Durable Object migrations
      - name: Publish Durable Object migrations
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          command: publish --config wrangler.toml --env ${{ env.WORKER_ENV }} --migrations
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}

      # Deploy the worker
      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          command: deploy --name ${{ env.WORKER_NAME }} --env ${{ env.WORKER_ENV }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          # Environment variables from wrangler.toml, can be overridden by secrets
          NETWORK: ${{ secrets.NETWORK || 'mainnet' }}
          DECIMALS: ${{ secrets.DECIMALS || '9' }}
          TOKEN_SUPPLY: ${{ secrets.TOKEN_SUPPLY || '1000000000000000000' }}
          VIRTUAL_RESERVES: ${{ secrets.VIRTUAL_RESERVES || '1000000000' }}
          CURVE_LIMIT: ${{ secrets.CURVE_LIMIT || '1000000000000' }}
          PRIMARY_LOCK_PERCENTAGE: ${{ secrets.PRIMARY_LOCK_PERCENTAGE || '90' }}
          SECONDARY_LOCK_PERCENTAGE: ${{ secrets.SECONDARY_LOCK_PERCENTAGE || '10' }}
          FEE_PERCENTAGE: ${{ secrets.FEE_PERCENTAGE || '1' }}
          # Additional secrets
          API_KEY: ${{ secrets.API_KEY }}
          WALLET_PRIVATE_KEY: ${{ secrets.WALLET_PRIVATE_KEY }}
          ADMIN_KEY: ${{ secrets.ADMIN_KEY }}
          CODEX_API_KEY: ${{ secrets.CODEX_API_KEY }}

      - name: Notify on Success
        if: success()
        run: |
          echo "Worker deployment completed successfully!"
          echo "Deployed service: ${{ env.WORKER_NAME }}"
          echo "Environment: ${{ env.WORKER_ENV }}"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "Worker deployment failed!"
          echo "Please check the logs for more information and verify your Cloudflare credentials."
